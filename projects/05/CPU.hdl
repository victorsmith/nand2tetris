// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Determin if A or C instruction using instruction[15] (MSB) => aluOut is a constant value (data)
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=instrType); 


    // cccccc values determine the a load
    
    ARegister(in=instrType, load=instruction[3], out=aRegOut, out=aRegOutPC, out=addressM);
    

    // If a (instruction[12]) == 0 => use the aRegOut value
    //                        else => use the inM value
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aluIn2);
    

    // 1-XXa-ccc-ccc-ddd-jjj

    // If something is true in the 3 j bits => we're jumping
    // If its not => we're incrementing
    // If reset is true => nothing matters anyway (we're going to 0)
    Or8Way(in=aRegOutPC[0..2], out=loadPc);
    // If we're not loading a new value, then we're incrementing
    // If the reset is true, it nulified load and inc so we 
    // *shouldn't* need to worry about them
    Not(in=loadPc, out=incPc);
    PC(in=aRegOutPC, load=loadPc, inc=incPc, reset=reset, out=pc);    


    DRegister(in=aluOut, load=instruction[4], out=dOut);
    ALU(x=dOut, y=aluIn2, zx=, nx=, zy=, ny=, f=, no=, out=aluOut, out=outM, zr=, ng=);
}