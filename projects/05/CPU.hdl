// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // All A instructions are loaded into the A register  (@2 => A = 2) (instruction[15] == 0)
    // SOME C instructions result in the ALU output being loaded into the 
    // A register (when d3 aka instruction[5] == true and instruction[15] = 1)
    // => The C example happened in our looping program
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=instr); 

    // If A instruction (instruction[15] == 0) => Always load @x value into the register
    // If C instruction (instruction[15] == 1) => Potentially load alu output 
    //    (if instruction[5] == 1) into the register
    Mux(a=true, b=instruction[5], sel=instruction[15], out=loadA);

    ARegister(in=instr, load=loadA, out=aRegOut, out[0..2]=a02, out=aRegOutPC, out[0..14]=addressM );

    // If a (instruction[12]) == 0 => use the aRegOut value
    //                        else => use the inM value
    Mux(a=false, b=instruction[12], sel=instruction[15], out=AorM);
    Mux16(a=aRegOut, b=inM, sel=AorM, out=aluIn2);
    
    // 1-XXa-ccc-ccc-ddd-jjj
    // FIXME: D should only load on C instructions
    Mux(a=false, b=instruction[4], sel=instruction[15], out=loadD);
    DRegister(in=aluOut, load=loadD, out=dOut);

    ALU(x=dOut, y=aluIn2, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=aluOut, 
        out=outM, 
        zr=zr, 
        ng=ng
    );

    // 111 000 110 000 0 100
    // 111 0 001 100 000 100

    Not(in=ng, out=Nng);
    Not(in=zr, out=Nzr);

    // TODO: Everything is backwards! Check jump code and condition at the same time => Evaluate jump with  Or8Way
    // FIXME: This is a very interesting approach => Study in greater detail    

    // To check postive, check !ng && !zr => No need to do 0 check for the ng, since it's handled for us by the ALU
    And(a=Nng, b=Nzr, out=positive);


    And(a=instruction[0], b=positive, out=J0);
    And(a=instruction[1], b=zr,  out=J1);
    And(a=instruction[2], b=ng,  out=J2);

    // If something is true in the 3 j bits => we're jumping 
    // If its not => we're incrementing
    // If reset is true => nothing matters anyway (we're going to 0)
    Or8Way(in[0]=J0, in[1]=J1, in[2]=J2, in[3..7]=false, out=preLoadPc);
    
    // only jump on C instruction (instruction[15] == 1)
    Mux(a=false, b=preLoadPc, sel=instruction[15], out=loadPc);
    // And(a=preLoadPc, b=instruction[15], out=loadPc);
  
    // If we're not loading a new value, then we're incrementing
    // If the reset is true, it nulified load and inc so we 
    // *shouldn't* need to worry about them
    Not(in=loadPc, out=incPc);
    
    // FIXME: Are we returning out[0..14] or out[1..15]
    PC(in=aRegOutPC, load=loadPc, inc=incPc, reset=reset, out[0..14]=pc);    

    // TODO: WriteM
    // Use 1st d value to determine the writeM value 
    // Only write to M iff a C instruction is being called
    // A instructions cannot directly write to M. 
    // There is always an intermediate step of D=A => M=D @memlocation
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);
}