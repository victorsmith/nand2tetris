// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];


    /**
    * 16383 - 011 1111 1111 1111
    * 24575 - 101 1111 1111 1111
    * 24576 - 110 0000 0000 0000
    */

    /**
    *  if address[15] == 0 && address[14] == 0  => RAM16K
    *  if address[15] == 1 && address[14] == 0  => SCREEN
    *  if address[15] == 1 && address[15] == 1  => KEYBOARD
    */
    PARTS:
    // Put your code here:
    DMux4Way(in=load, sel=address[13..14], a=ramLoad1, b=ramLoad2, c=screenLoad, d=keyboardLoad);
    // Internal pin cna only be fed once
    Or(a=ramLoad1, b=ramLoad2, out=ramLoad);

    // Need to make sure to use DMux before OR the ram chips will all load the 'in' value.
    // This corrupts the data inside.
    RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);
    Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);
    Keyboard(out=keyboardOut);

    // Determine what the menory unit is outputting to CPU using the MSB and 2nd MSB
    // 00 =>      ramLoad
    // 01 =>      ramLoad
    // 10 =>   screenLoad
    // 11 => keyboardLoad
    Mux4Way16(a=ramOut, b=ramOut, c=screenOut, d=keyboardOut, sel=address[13..14], out=out);
}